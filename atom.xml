<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YH BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-12T02:00:18.193Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yonh Wall</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决ScrollView嵌套RecyclerView的显示及滑动问题</title>
    <link href="http://yoursite.com/2017/10/10/%E3%80%90Android%E3%80%91%E8%A7%A3%E5%86%B3ScrollView%E5%B5%8C%E5%A5%97RecyclerView%E5%AF%BC%E8%87%B4%E7%9A%84%E6%98%BE%E7%A4%BA%E3%80%81%E9%AB%98%E5%BA%A6%E5%8F%8A%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/10/【Android】解决ScrollView嵌套RecyclerView导致的显示、高度及滑动卡顿问题/</id>
    <published>2017-10-10T13:39:16.320Z</published>
    <updated>2017-10-12T02:00:18.193Z</updated>
    
    <content type="html"><![CDATA[<p>项目中时常需要实现在ScrollView中嵌入一个或多个RecyclerView。这一做法通常会导致如下几个问题</p><ul><li>页面滑动卡顿</li><li>ScrollView高度显示不正常</li><li>RecyclerView内容显示不全</li></ul><p>本文将利用多种方式分别解决上述问题</p><h1 id="滑动卡顿解决方案"><a href="#滑动卡顿解决方案" class="headerlink" title="滑动卡顿解决方案"></a>滑动卡顿解决方案</h1><p>若只存在滑动卡顿这一问题，可以采用如下两种简单方式快速解决</p><h2 id="利用RecyclerView内部方法"><a href="#利用RecyclerView内部方法" class="headerlink" title="利用RecyclerView内部方法"></a>利用RecyclerView内部方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">recyclerView.setHasFixedSize(<span class="keyword">true</span>);</div><div class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</div></pre></td></tr></table></figure><p>其中，setHasFixedSize(true)方法使得RecyclerView能够固定自身size不受adapter变化的影响；而setNestedScrollingeEnabled(false)方法则是进一步调用了RecyclerView内部NestedScrollingChildHelper对象的setNestedScrollingeEnabled(false)方法，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNestedScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</div><div class="line">    getScrollingChildHelper().setNestedScrollingEnabled(enabled);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>进而，NestedScrollingChildHelper对象通过该方法关闭RecyclerView的嵌套滑动特性，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNestedScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mIsNestedScrollingEnabled) &#123;</div><div class="line">        ViewCompat.stopNestedScroll(mView);</div><div class="line">    &#125;</div><div class="line">    mIsNestedScrollingEnabled = enabled;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如此一来，限制了RecyclerView自身的滑动，整个页面滑动仅依靠ScrollView实现，即可解决滑动卡顿的问题</p><h2 id="重写LayoutManager"><a href="#重写LayoutManager" class="headerlink" title="重写LayoutManager"></a>重写LayoutManager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>) &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canScrollVertically</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这一方式使得RecyclerView的垂直滑动始终返回false，其目的同样是为了限制自身的滑动</p><h1 id="综合解决方案"><a href="#综合解决方案" class="headerlink" title="综合解决方案"></a>综合解决方案</h1><p>若是需要综合解决上述三个问题，则可以采用如下几种方式</p><h2 id="插入LinearLayout-RelativeLayout"><a href="#插入LinearLayout-RelativeLayout" class="headerlink" title="插入LinearLayout/RelativeLayout"></a>插入LinearLayout/RelativeLayout</h2><p>在原有布局中插入一层LinearLayout/RelativeLayout，形成如下布局</p><p><img src="/img/1.png" alt=""></p><h2 id="重写LayoutManager-1"><a href="#重写LayoutManager-1" class="headerlink" title="重写LayoutManager"></a>重写LayoutManager</h2><p>该方法的核心思想在于通过重写LayoutManager中的onMeasure()方法，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state, <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(recycler, state, widthSpec, heightSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重新实现RecyclerView高度的计算，使得其能够在ScrollView中表现出正确的高度，具体重写方式可参考这篇文章</p><p><a href="http://www.cnblogs.com/tianzhijiexian/p/4469516.html" target="_blank" rel="external">http://www.cnblogs.com/tianzhijiexian/p/4469516.html</a></p><h2 id="重写ScrollView"><a href="#重写ScrollView" class="headerlink" title="重写ScrollView"></a>重写ScrollView</h2><p>该方法的核心思想在于通过重写ScrollView的onInterceptTouchEvent(MotionEvent ev)方法，拦截滑动事件，使得滑动事件能够直接传递给RecyclerView，具体重写方式可参考如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by YH on 2017/10/10.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> slop;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> touch;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerScrollView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        setSlop(context);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        setSlop(context);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        setSlop(context);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 是否intercept当前的触摸事件</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> ev 触摸事件</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true：调用onMotionEvent()方法，并完成滑动操作</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//  保存当前touch的纵坐标值</span></div><div class="line">                touch = (<span class="keyword">int</span>) ev.getRawY();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                <span class="comment">//  滑动距离大于slop值时，返回true</span></div><div class="line">                <span class="keyword">if</span> (Math.abs((<span class="keyword">int</span>) ev.getRawY() - touch) &gt; slop) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取相应context的touch slop值（即在用户滑动之前，能够滑动的以像素为单位的距离）</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> context ScrollView对应的context</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSlop</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        slop = ViewConfiguration.get(context).getScaledTouchSlop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>事实上，尽管我们能够采用多种方式解决ScrollView嵌套RecyclerView所产生的一系列问题，但由于上述解决方式均会使得RecyclerView在页面加载过程中一次性显示所有内容，因此当RecyclerView下的条目过多时，将会对影响整个应用的运行效率。基于此，在这种情况下我们应当尽量避免采用ScrollView嵌套RecyclerView的布局方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中时常需要实现在ScrollView中嵌入一个或多个RecyclerView。这一做法通常会导致如下几个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面滑动卡顿&lt;/li&gt;
&lt;li&gt;ScrollView高度显示不正常&lt;/li&gt;
&lt;li&gt;RecyclerView内容显示不全&lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
